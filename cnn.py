# -*- coding: utf-8 -*-
"""CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WpLnMtvE3iiw1G6ZnpRyQh4m849NFyLJ
"""

import os
import tensorflow as tf
import seaborn as sns
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, GlobalAveragePooling2D, Dense, Dropout, BatchNormalization, Flatten
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint
import kagglehub

# Downloading Dataset
path = kagglehub.dataset_download("vipoooool/new-plant-diseases-dataset")
print("Path to dataset files:", path)

# Directory Paths
BASE_DIR = "/kaggle/input/new-plant-diseases-dataset/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)"
TRAIN_DIR = BASE_DIR + "/train"
VAL_DIR = BASE_DIR + "/valid"
TEST_DIR = "/kaggle/input/new-plant-diseases-dataset/test"

# Image Parameters
IMG_SHAPE_224 = (224, 224)
IMG_SHAPE_256 = (256, 256)
BATCH_SIZE = 64

# Data Exploration
Disease_Categories = os.listdir(TRAIN_DIR)
plant_labels = []
image_counts = []
for category in Disease_Categories:
    plant_labels.append(category)
    imgs_path = os.listdir(TRAIN_DIR + "/" + category)
    image_counts.append(len(imgs_path))
image_counts.sort(reverse=True)

sns.set(style="whitegrid", color_codes=True)
plt.figure(figsize=(20, 20), dpi=200)
ax = sns.barplot(x=image_counts, y=plant_labels, palette="Greens")
plt.xticks(fontsize=20)
plt.yticks(fontsize=20)
plt.show()

# Data Generators
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    vertical_flip=True,
    brightness_range=[0.8, 1.2],
    fill_mode='nearest'
)

val_datagen = ImageDataGenerator(rescale=1./255)

test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_directory(
    TRAIN_DIR,
    target_size=IMG_SHAPE_224,
    batch_size=BATCH_SIZE,
    class_mode='categorical'
)

val_generator = val_datagen.flow_from_directory(
    VAL_DIR,
    target_size=IMG_SHAPE_224,
    batch_size=BATCH_SIZE,
    class_mode='categorical'
)

test_generator = test_datagen.flow_from_directory(
    TEST_DIR,
    target_size=IMG_SHAPE_224,
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    shuffle=False
)

# Model Definition (224x224, 6 Classes)
model_224 = Sequential([
    Conv2D(64, (3, 3), padding='same', activation='relu', input_shape=(224, 224, 3)),
    BatchNormalization(),
    MaxPooling2D(pool_size=(2, 2)),

    Conv2D(128, (3, 3), padding='same', activation='relu'),
    BatchNormalization(),
    MaxPooling2D(pool_size=(2, 2)),

    Conv2D(256, (3, 3), padding='same', activation='relu'),
    BatchNormalization(),
    MaxPooling2D(pool_size=(2, 2)),
    Dropout(0.5),

    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(38, activation='softmax')
])

model_224.summary()
model_224.compile(optimizer=Adam(learning_rate=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])

# Callbacks
callbacks = [
    EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True),
    ModelCheckpoint("best_model_224.h5", monitor='val_loss', save_best_only=True)
]

# Training
history_224 = model_224.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // BATCH_SIZE,
    validation_data=val_generator,
    validation_steps=val_generator.samples // BATCH_SIZE,
    epochs=30,
    callbacks=callbacks
)

test_loss_224, test_accuracy_224 = model_224.evaluate(test_generator)
print(f"Test Accuracy (224x224 Model): {test_accuracy_224 * 100:.2f}%")

# Plotting Training History
plt.figure(figsize=(12, 4))
plt.plot(history_224.history['accuracy'], label='Train Accuracy')
plt.plot(history_224.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model Accuracy (224x224)')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

plt.figure(figsize=(12, 4))
plt.plot(history_224.history['loss'], label='Train Loss')
plt.plot(history_224.history['val_loss'], label='Validation Loss')
plt.title('Model Loss (224x224)')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

